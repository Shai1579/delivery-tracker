{"version":3,"sources":["services/socketService.js","pages/DeliveryDisplay.jsx","services/httpService.js","services/locationService.js","pages/DeliveryTrack.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["socketService","socket","setup","io","on","eventName","cb","off","emit","data","terminate","createSocketService","DeliveryDisplay","id","useParams","useState","coords","setCoords","userLocation","setUserLocation","useEffect","navigator","geolocation","getCurrentPosition","location","latitude","longitude","className","JSON","stringify","width","height","frameorder","style","border","src","lat","lng","allowFullScreen","window","BASE_URL","axios","Axios","create","withCredentials","httpService","endpoint","ajax","a","method","url","res","console","log","dir","locationService","DeliveryTrack","strIds","isSharing","setIsSharing","intervalId","setIntervalId","ids","split","clearIntervals","onNewPos","clearInterval","onClick","setInterval","e","alert","App","path","component","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e4c1b31.chunk.js","sourcesContent":["import io from 'socket.io-client'\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'production')? '' : '//localhost:3030'\r\nexport const socketService = createSocketService()\r\n\r\nwindow.socketService = socketService\r\n\r\n\r\nfunction createSocketService() {\r\n  var socket\r\n  const socketService = {\r\n    setup() {\r\n      socket = io(baseUrl)\r\n    },\r\n    on(eventName, cb) {\r\n      socket.on(eventName, cb)\r\n    },\r\n    off(eventName, cb) {\r\n      socket.off(eventName, cb)\r\n    },\r\n    emit(eventName, data) {\r\n      socket.emit(eventName, data)\r\n    },\r\n    terminate() {\r\n      socket = null\r\n    }\r\n  }\r\n  return socketService\r\n}\r\n","import { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router\"\nimport { socketService } from \"../services/socketService\"\n\nexport function DeliveryDisplay() {\n    const { id } = useParams()\n    const [coords, setCoords] = useState(null)\n    const [userLocation, setUserLocation] = useState(null)\n\n    useEffect(() => {\n        navigator.geolocation?.getCurrentPosition(({coords}) => {\n            let location = `${coords.latitude}/${coords.longitude}`\n            setUserLocation(location)\n        })\n        socketService.setup()\n        socketService.emit('register customer', id)\n        socketService.on('new coords', coords => {\n            setCoords(coords)\n        })\n\n        return () => {\n            socketService.off('new coords')\n            socketService.terminate()\n        }\n    }, [id])\n    return (\n        <main className=\"delivery-display\">\n            <h1>display!!</h1>\n            <pre>{JSON.stringify(coords)}</pre>\n           { coords &&\n            <iframe\n                width=\"450\"\n                height=\"250\"\n                frameorder=\"0\" \n                style={{border: 0}}\n                src={`https://www.google.com/maps/embed/v1/directions\n                ?key=AIzaSyD_RtSmY40CDJvjkyKGMbNuDLl29MwbZyk\n                &origin=${userLocation}\n                &destination=${coords.lat}/${coords.lng}\n                &avoid=tolls|highways`} allowFullScreen>\n            </iframe>}\n        </main>\n    )\n}","import Axios from 'axios'\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        console.dir(err)\r\n        throw err\r\n    }\r\n}","import {httpService} from './httpService'\n\nexport const locationService = {\n    setCoords\n}\n\nasync function setCoords(coords) {\n    try {\n        await httpService.post('coord', {coords})\n    } catch (err) {\n        throw err\n    }\n}","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { socketService } from '../services/socketService'\nimport { locationService } from '../services/locationService'\nimport { httpService } from \"../services/httpService\";\n\n\nexport function DeliveryTrack() {\n\n    const { strIds } = useParams()\n    const [isSharing, setIsSharing] = useState(false)\n    const [intervalId, setIntervalId] = useState(null)\n\n    useEffect(() => {\n        socketService.setup()\n        const ids = strIds?.split(',')\n        socketService.emit('register deliverer', ids)\n        return () => {\n            clearIntervals()\n            socketService.terminate()\n        }\n    }, [strIds])\n    \n    const onToggleShareLocation = () => {\n        if (isSharing) clearIntervals()\n        else if (!navigator.geolocation) alert('Geolocation is not supported by this browser.')\n        else {\n            let intervalId = setInterval(() => {\n                navigator.geolocation.getCurrentPosition(onNewPos, (e) => {\n                    clearIntervals()\n                    alert('please enable location in your setting')\n                });\n            }, 5000)\n            setIntervalId(intervalId)\n        }\n        setIsSharing(!isSharing)\n    }\n\n    const onNewPos = async({ coords }) => {\n        try {\n            await locationService.setCoords({ lat: coords.latitude, lng: coords.longitude })\n        }\n        catch (err) {\n            clearIntervals()\n            // alert('you have been disconnected please refresh the page')\n        }\n    }\n    function clearIntervals() {\n        console.log(intervalId);\n        clearInterval(intervalId)\n    }\n\n    return (\n        <main className=\"delivery-track\">\n            <h1>Hi there delivery-men</h1>\n            <h3>Your location {isSharing ? 'is shared now' : 'is not shared yet'}</h3>\n            <button onClick={onToggleShareLocation}>{isSharing ? 'stop' : 'start'} sharing</button>\n        </main>\n    )\n}","import React from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport { DeliveryDisplay } from './pages/DeliveryDisplay'\nimport { DeliveryTrack } from './pages/DeliveryTrack'\n\n\nexport function App() {\n  return (\n    <div className=\"app\">\n      <Router>\n          <Switch>\n            <Route path=\"/track/:strIds\" component={DeliveryTrack} />\n            <Route path=\"/display/:id\" component={DeliveryDisplay} />\n          </Switch>\n      </Router>\n    </div>\n  )\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './assets/styles/main.scss'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}